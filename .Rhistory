1-pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-dgamma(0.95, shape, scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate,scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate,lower.tail=FALSE);#scale);
dgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
library(distr)
install(distr)
install.packages("distr")
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
density <-pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
value = 0.025*density;
0.025*density;
round(0.025*density,2);
qgamma(0.975,shape,rate);
plot(Gammad(shape,scale))
?Gammad
y<-c(1:120)
p<-dgamma(y,shape,rate)
plot(y,p)
p<-dgamma(y,shape,scale)
plot(y,p)
plot(p,y)
plot(y,p)
plot(y,1/p)
dbinom(10,20,0.5)
dbinom(5,20,0.5)
dbinom(5,20,0.2)
?dbinom
dbinom(6,20,0.33)
dbinom(1,20,0.33)
dbinom(20,20,0.33)
dbinom(20,20,0.5)
dbinom(0,20,0.5)
dbinom(1,20,0.5)
dbinom(2,20,0.5)
dbinom(3,20,0.5)
dbinom(4,20,0.5)
dbinom(5,20,0.5)
dbinom(6,20,0.5)
dbinom(7,20,0.5)
dbinom(8,20,0.5)
dbinom(9,20,0.5)
dbinom(10,20,0.5)
dbinom(11,20,0.5)
dbinom(3,3,0.5)
dbinom(1,3,0.5)
dbinom(2,3,0.5)
dbinom(0,3,0.5)
?nrow
?createFolds
library(C50)
?createFolds
library(caret)
?createFolds
?trainControl
trainData <- data.frame(c(4,3,5,6,2,1,7,8), c(FALSE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE));
trainData<-colnames("Ranking","Selected");
?colnames
colNames(trainData)<-c("Ranking","Selected");
colnames(trainData)<-c("Ranking","Selected");
head(trainData)
?trainControl
library(caret)
?trainControl
trControl=trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(rankData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, rankData,trControl=rControl)
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(rankData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,trControl=myControl);
summary(myModel)
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(rankData)<-c("Ranking","Selected");
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,trControl=myControl);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), as.factor(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
summary(myModel)
myModel
myData
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
replace(myData,myData$Selected=="FALSE.","F");
colnames(myData)<-c("Ranking","Selected");
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
replace(myData,myData$Selected=="FALSE.","F");
replace(myData$Selected,myData$Selected=="FALSE.","F");
?data.frame
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), checkName=TRUE);
colnames(myData)<-c("Ranking","Selected");
myData
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), checkName=FALSE);
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
summary(myModel)
myModel
myData
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), check.names=FALSE);
colnames(myData)<-c("Ranking","Selected");
myData
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), check.names=TRUE);
colnames(myData)<-c("Ranking","Selected");
myData
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
warnings()
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(as.numeric(c(4,3,5,3,6,2,1,7,8,2)), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=10);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=2);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=6);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=2);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
xplot(myKnnModel,myRFModel)
resampleList<-resamples(list(item1=myKnnModel,item2=myRFModel))
xplot(resamples,metric="ROC")
bwplot(resamples,metric="ROC")
bwplot(resampleList,metric="ROC")
xplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,metric="ROC")
?dotplot
xyplot(resampleList,metric="ROC")
dotplot(resampleList,top=2,metric="ROC")
dotplot(resampleList,top=3,metric="ROC")
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,top=3,metric="ROC")
bwplot(resampleList,metric="ROC")
dotplot(resampleList,top=3,metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
dotplot(resampleList,top=3,xlim=range(0,1.5),metric="ROC")
dotplot(resampleList,xlim=range(0,1.5),metric="ROC")
dotplot(resampleList,xlim=range(0,2.5),metric="ROC")
dotplot(resampleList,xlim=range(0,5.5),metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
bwplot(resampleList,metric="ROC")
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
warning()
warnings()
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
bwplot(resampleList,metric="ROC")
#
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(knnModel,glmModel))
bwplot(resampleList,metric="ROC")
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(rfModel,glmModel))
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
myModel
glmModel
rfModel
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
knnModel
resampleList<-resamples(list(rfModel,glmModel,knnModel))
bwplot(resampleList,metric="ROC")
resampleList<-resamples(list(rfModel=rfModel,glmModel=glmModel,knnModel=knnModel))
bwplot(resampleList,metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
bwplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
bwplot(resampleList,metric="ROC")
glmModel<-train(Selected~Ranking, myData,method="glmnet", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glmnet", trControl=myControl);
knnModel
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
library(caret)
myFolds <- createFolds(myData$Ranking, k=3);
myFolds <- createFolds(myData$Ranking, k=4);
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
glmModel
rfModel
knnModel
resampleList<-resamples(list(rfModel=rfModel,glmModel=glmModel,knnModel=knnModel))
bwplot(resampleList,metric="ROC")
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(rfModel=rfModel,glmModel=glmModel,knnModel=knnModel))
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
dotplot(resampleList,xlim=range(0,1),metric="ROC")
xyplot(resampleList,xlim=range(0,1), metric="ROC")
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
svnModel
svmModel
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
bwplot(resampleList,metric="ROC")
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
glmModel
rfModel
knnModel
svmModel
#Visualize models
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
bwplot(resampleList,metric="ROC")
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel))
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3,5),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
glmModel
rfModel
knnModel
svmModel
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel))
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
bwplot(resampleList,metric="ROC")
SVM_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinearWeights2", trControl=kFoldControl);
#libraries
library(caret)
####################
#Import data
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_VotingAggregation//aggregateAnswerOptionsPerQuestion.R");
summaryTable <- runMain();
#summaryTable <- data.frame(summaryTable);
#I need to guarantee that some examples (i.e., failing methods)
#do not dominate the training or testing sets. To do that, I need to get a
#close to equal proportion of examples in both sets
#Scramble the dataset before extracting the training set.
set.seed(8850);
g<- runif((nrow(summaryTable))); #generates a random distribution
summaryTable <- summaryTable[order(g),];
##################################################
# Create trainControl to be reused by all models #
#convert columns to numeric
summaryTable<- data.frame(summaryTable, stringsAsFactors = FALSE)
summaryTable[,"rankingVote"] <- as.numeric(unlist(summaryTable[,"rankingVote"]));
summaryTable$bugCoveringLabels <- as.character(summaryTable$bugCovering);
summaryTable$bugCoveringLabels<- replace(summaryTable$bugCoveringLabels,summaryTable$bugCoveringLabels=="FALSE", "F");
summaryTable$bugCoveringLabels<- replace(summaryTable$bugCoveringLabels,summaryTable$bugCoveringLabels=="TRUE", "T");
summaryTable$bugCoveringLabels<- as.factor(summaryTable$bugCoveringLabels);
# sub = sample(nrow(summaryTable), floor(nrow(summaryTable) * 1))
# train = summaryTable[sub,]
# test = summaryTable[-sub,]
#
# xTrain = train[,"rankingVote"]
# yTrain = as.factor(train$bugCovering)
#
# nb.fit = train(bugCoveringLabels ~ rankingVote,summaryTable,'nb',trControl=trainControl(method='cv',number=5))
# Create custom indices: myFolds
#Guarantees that we are going to use the exact
#same datasets for all models
myFolds <- createFolds(summaryTable[,"rankingVote"] , k = 10);
# Create reusable trainControl object: myControl
kFoldControl <- trainControl(
index = myFolds, #Train with 9 folds and validate with one
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE, #
savePredictions = TRUE, #
summaryFunction = twoClassSummary
);
#######################
# Generate each model #
##############
# Naive Bayes
NB_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="nb", trControl=kFoldControl);
NB_model
######
# KNN
KNN_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="knn", trControl=kFoldControl);
KNN_model
################
# Random Forest
RF_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="rf", trControl=kFoldControl);
RF_model
######
# GLM
GLM_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="glm", trControl=kFoldControl);
GLM_model
#glmnet model is a more sophisticated solution that use penalty terms to reduce the magnitude
#of the two GLM coeficients. The goal of GMLNet is to explain as much variance in the model.
#The trade-off is that glmnet accepts more bias in the data (more risk of overfitting)
#In any case, both glmnet and glm produce the exact same results for my data, therefore I favored
#the simplest model.
######
# SVM
SVM_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinearWeights2", trControl=kFoldControl);
SVM_model
###################
SVM_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinearWeights2", trControl=kFoldControl);
SVM_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinear2", trControl=kFoldControl);
SVM_model
SVM_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinearWeights", trControl=kFoldControl);
SVM_model
SVM_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinear", trControl=kFoldControl);
SVM_model
GLM_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="glm", trControl=kFoldControl);
GLM_model
GLM_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="glmnet", trControl=kFoldControl);
GLM_model
names(getModelInfo())
GLM_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="glmboost", trControl=kFoldControl);
GLM_model
GLM_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="bayesglm", trControl=kFoldControl);
GLM_model
GLM_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="glm.nb", trControl=kFoldControl);
GLM_model
KNN_model <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="knn", trControl=kFoldControl);
KNN_model
NB_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="nb", trControl=kFoldControl);
NB_model
RF_model<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="rf", trControl=kFoldControl);
RF_model
