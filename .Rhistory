?trainControl
trainData <- data.frame(c(4,3,5,6,2,1,7,8), c(FALSE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE));
trainData<-colnames("Ranking","Selected");
?colnames
colNames(trainData)<-c("Ranking","Selected");
colnames(trainData)<-c("Ranking","Selected");
head(trainData)
?trainControl
library(caret)
?trainControl
trControl=trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(rankData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, rankData,trControl=rControl)
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(rankData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,trControl=myControl);
summary(myModel)
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(rankData)<-c("Ranking","Selected");
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,trControl=myControl);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), as.factor(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
summary(myModel)
myModel
myData
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
replace(myData,myData$Selected=="FALSE.","F");
colnames(myData)<-c("Ranking","Selected");
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
replace(myData,myData$Selected=="FALSE.","F");
replace(myData$Selected,myData$Selected=="FALSE.","F");
?data.frame
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), checkName=TRUE);
colnames(myData)<-c("Ranking","Selected");
myData
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), checkName=FALSE);
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
summary(myModel)
myModel
myData
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), check.names=FALSE);
colnames(myData)<-c("Ranking","Selected");
myData
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE), check.names=TRUE);
colnames(myData)<-c("Ranking","Selected");
myData
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myControl<-trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummary);
myModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
warnings()
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(as.numeric(c(4,3,5,3,6,2,1,7,8,2)), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=10);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=2);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=6);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=2);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
xplot(myKnnModel,myRFModel)
resampleList<-resamples(list(item1=myKnnModel,item2=myRFModel))
xplot(resamples,metric="ROC")
bwplot(resamples,metric="ROC")
bwplot(resampleList,metric="ROC")
xplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,metric="ROC")
?dotplot
xyplot(resampleList,metric="ROC")
dotplot(resampleList,top=2,metric="ROC")
dotplot(resampleList,top=3,metric="ROC")
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,top=3,metric="ROC")
bwplot(resampleList,metric="ROC")
dotplot(resampleList,top=3,metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
dotplot(resampleList,top=3,xlim=range(0,1.5),metric="ROC")
dotplot(resampleList,xlim=range(0,1.5),metric="ROC")
dotplot(resampleList,xlim=range(0,2.5),metric="ROC")
dotplot(resampleList,xlim=range(0,5.5),metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
bwplot(resampleList,metric="ROC")
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
warning()
warnings()
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
myKnnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myRFModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(item2=myKnnModel,item1=myRFModel))
bwplot(resampleList,metric="ROC")
#
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(knnModel,glmModel))
bwplot(resampleList,metric="ROC")
myData <- data.frame(c(4,3,5,3,6,2,1,7,8,2), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(rfModel,glmModel))
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
myModel
glmModel
rfModel
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
knnModel
resampleList<-resamples(list(rfModel,glmModel,knnModel))
bwplot(resampleList,metric="ROC")
resampleList<-resamples(list(rfModel=rfModel,glmModel=glmModel,knnModel=knnModel))
bwplot(resampleList,metric="ROC")
xyplot(resampleList,xlim=range(0,1.5), metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
bwplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
bwplot(resampleList,metric="ROC")
glmModel<-train(Selected~Ranking, myData,method="glmnet", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glmnet", trControl=myControl);
knnModel
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=3);
library(caret)
myFolds <- createFolds(myData$Ranking, k=3);
myFolds <- createFolds(myData$Ranking, k=4);
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
glmModel
rfModel
knnModel
resampleList<-resamples(list(rfModel=rfModel,glmModel=glmModel,knnModel=knnModel))
bwplot(resampleList,metric="ROC")
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1), make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=4);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
resampleList<-resamples(list(rfModel=rfModel,glmModel=glmModel,knnModel=knnModel))
bwplot(resampleList,metric="ROC")
densityplot(resampleList,metric="ROC")
dotplot(resampleList,xlim=range(-1,5.5),metric="ROC")
dotplot(resampleList,xlim=range(0,1),metric="ROC")
xyplot(resampleList,xlim=range(0,1), metric="ROC")
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
svnModel
svmModel
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
bwplot(resampleList,metric="ROC")
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
glmModel
rfModel
knnModel
svmModel
#Visualize models
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
bwplot(resampleList,metric="ROC")
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel))
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
library(caret)
myData <- data.frame(c(4,3,5,3,9,2,1,7,10,2,8,4,1,3,5),
make.names(c(FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)));
colnames(myData)<-c("Ranking","Selected");
myFolds <- createFolds(myData$Ranking, k=5);
set.seed(1234);
myControl<-trainControl(index=myFolds, classProbs=TRUE, summaryFunction=twoClassSummary);
knnModel<-train(Selected~Ranking, myData,method="knn", trControl=myControl);
rfModel<-train(Selected~Ranking, myData,method="rf", trControl=myControl);
glmModel<-train(Selected~Ranking, myData,method="glm", trControl=myControl);
svmModel<-train(Selected~Ranking, myData,method="svmRadial", trControl=myControl);
glmModel
rfModel
knnModel
svmModel
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel))
resampleList<-resamples(list(rf=rfModel,glm=glmModel,knn=knnModel, svm=svmModel))
bwplot(resampleList,metric="ROC")
#libraries
library(caret)
####################
#Import data
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_VotingAggregation//aggregateAnswerOptionsPerQuestion.R");
summaryTable <- runMain();
#summaryTable <- data.frame(summaryTable);
#I need to guarantee that some examples (i.e., failing methods)
#do not dominate the training or testing sets. To do that, I need to get a
#close to equal proportion of examples in both sets
#Scramble the dataset before extracting the training set.
set.seed(8850);
g<- runif((nrow(summaryTable))); #generates a random distribution
summaryTable <- summaryTable[order(g),];
##################################################
# Create trainControl to be reused by all models #
#convert columns to numeric
summaryTable<- data.frame(summaryTable, stringsAsFactors = FALSE)
summaryTable[,"rankingVote"] <- as.numeric(unlist(summaryTable[,"rankingVote"]));
summaryTable$bugCoveringLabels <- as.character(summaryTable$bugCovering);
summaryTable$bugCoveringLabels<- replace(summaryTable$bugCoveringLabels,summaryTable$bugCoveringLabels=="FALSE", "F");
summaryTable$bugCoveringLabels<- replace(summaryTable$bugCoveringLabels,summaryTable$bugCoveringLabels=="TRUE", "T");
summaryTable$bugCoveringLabels<- as.factor(summaryTable$bugCoveringLabels);
# Create custom indices: myFolds
#Guarantees that we are going to use the exact
#same datasets for all models
myFolds <- createFolds(summaryTable[,"rankingVote"] , k = 10);
# Create reusable trainControl object: myControl
kFoldControl <- trainControl(
index = myFolds, #Train with 9 folds and validate with one
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE, #
savePredictions = TRUE, #
summaryFunction = twoClassSummary
);
bayesglm<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="bayesglm", trControl=kFoldControl);
bayesglm.fit()
View(summaryTable)
View(summaryTable)
View(summaryTable)
summaryTable[,5]
bayesglm[,1]
bayesglm
bayesglm$pred
bayesglm$bestTune
bayesglm$method
bayesglm$modelType
bayesglm$results
bayesglm$pred
predict(bayesglm)
predictedBugCoveringList <- predict(bayesglm);
predictedBugCoveringList<-summaryTable[bayesglm[,1]==TRUE,5];
summaryTable$bugCovering <- as.factor(summaryTable$bugCovering);
predictedBugCoveringList <- predict(bayesglm);
predictedBugCoveringList<-summaryTable[bayesglm[,1]==TRUE,5];
predictedList <- as.numeric(unlist(predictedBugCoveringList[,2]));
predictedBugCoveringList
predictedBugCoveringList<-predictedBugCoveringList[bayesglm[,1]==TRUE,5];
predictedBugCoveringList<-summaryTable[predictedBugCoveringList[,1]==TRUE,5];
predictedBugCoveringList<-summaryTable[predictedBugCoveringList[,1]=="T",10];
summaryTable[predictedBugCoveringList[,1]=="T",10]
summaryTable[predictedBugCoveringList=="T",10]
predictionList <- predict(bayesglm);
predictedBugCoveringTable<-summaryTable[predictionList=="T",10];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,2]));
predictedBugCoveringTable
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_VotingAggregation//aggregateAnswerOptionsPerQuestion.R");
summaryTable <- runMain();
library(class);
library(gmodels);
library(caret);
library(e1071)
library(ggplot2);
set.seed(9850);
g<- runif((nrow(summaryTable))); #generates a random distribution
summaryTable <- summaryTable[order(g),];#reorder the rows based on a random index
#convert columns to numeric
summaryTable[,"rankingVote"] <- as.numeric(unlist(summaryTable[,"rankingVote"]));
summaryTable[,"majorityVote"] <- as.numeric(unlist(summaryTable[,"majorityVote"]));
summaryTable[,"thresholdVote"] <- as.numeric(unlist(summaryTable[,"thresholdVote"]));
#Select only the ranking as a feature to predict bugCovering
trainingData <- summaryTable[,c("bugCovering","rankingVote")];
fitModel.cv <- knn.cv(trainingData, trainingData$bugCovering, k=3, l=0, prob = FALSE, use.all=TRUE);
trainingData$bugCovering <- as.factor(trainingData$bugCovering);
predictedBugCoveringList<-trainingData[fitModel.cv.df[,1]==TRUE,];
fitModel.cv.df<-data.frame(fitModel.cv);
trainingData$bugCovering <- as.factor(trainingData$bugCovering);
predictedBugCoveringList<-trainingData[fitModel.cv.df[,1]==TRUE,];
predictedList <- as.numeric(unlist(predictedBugCoveringList[,2]));
predictedList
summaryTable[predictionList=="T",10];
summaryTable[predictionList=="T",10]
summaryTable$bugCovering <- as.factor(summaryTable$bugCovering);
predictionList <- predict(bayesglm);
predictionList[predictionList=="T"]
predictionList
summaryTable[,10]
summaryTable[,9]
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_VotingAggregation//aggregateAnswerOptionsPerQuestion.R");
summaryTable <- runMain();
#summaryTable <- data.frame(summaryTable);
#I need to guarantee that some examples (i.e., failing methods)
#do not dominate the training or testing sets. To do that, I need to get a
#close to equal proportion of examples in both sets
#Scramble the dataset before extracting the training set.
set.seed(8850);
g<- runif((nrow(summaryTable))); #generates a random distribution
summaryTable <- summaryTable[order(g),];
##################################################
# Create trainControl to be reused by all models #
#convert columns to numeric
summaryTable<- data.frame(summaryTable, stringsAsFactors = FALSE)
summaryTable[,"rankingVote"] <- as.numeric(unlist(summaryTable[,"rankingVote"]));
summaryTable$bugCoveringLabels <- as.character(summaryTable$bugCovering);
summaryTable$bugCoveringLabels<- replace(summaryTable$bugCoveringLabels,summaryTable$bugCoveringLabels=="FALSE", "F");
summaryTable$bugCoveringLabels<- replace(summaryTable$bugCoveringLabels,summaryTable$bugCoveringLabels=="TRUE", "T");
summaryTable$bugCoveringLabels<- as.factor(summaryTable$bugCoveringLabels);
summaryTable[,10]
summaryTable["T",10]
summaryTable[,10]=="T"
summaryTable[,10]=="T"
predictionList=="T"
summaryTable[predictionList=="T",10];
summaryTable[predictionList=="T",];
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
knn <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="knn", trControl=kFoldControl);
rf<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="rf", trControl=kFoldControl);
glm<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="glm", trControl=kFoldControl);
predictionList <- predict(glm);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]))
predictedList
predictionList <- predict(knn);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
predictionList <- predict(rf);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
svmLinear <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinear", trControl=kFoldControl);
svmLinear2 <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinear2", trControl=kFoldControl);
svmLinearWeights <- train(bugCoveringLabels ~ rankingVote,summaryTable, method="svmLinearWeights", trControl=kFoldControl);
predictionList <- predict(svm);
predictionList <- predict(svmLinear);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
predictionList <- predict(svmLinear2);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
predictionList <- predict(svmLinearWeights);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
nb<- train(bugCoveringLabels ~ rankingVote,summaryTable, method="nb", trControl=kFoldControl);
predictionList <- predict(nb);
predictedBugCoveringTable<-summaryTable[predictionList=="T",];
predictedList <- as.numeric(unlist(predictedBugCoveringTable[,9]));
predictedList
predict(nb)
tableMine[129,5]
tableMine[129,5]<- table(predict(nb))
table(predict(nb))
predict(nb)
predict(bayesglm)
table(predict(nb))
table(predict(bayesglm))
table(predict(knn))
nb
knn
